generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  userType String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  hotel Hotel[]
  reservations Reservations[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Hotel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String
  city        String?
  state       String?
  zip         String?
  country     String?
  phone       String?
  description String
  rating      Float?
  price       String
  amenities   String[]
  images      String[]
  hostId String @db.ObjectId

  user User @relation(fields: [hostId], references: [id], onDelete: Cascade)
  reservation Reservations[]
}

model Reservations {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  hotelId String @db.ObjectId
  totalPrice Int
  startDate DateTime
  endDate DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}